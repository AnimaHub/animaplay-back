// <auto-generated />
using System;
using AnimaPlayBack.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AnimaPlayBack.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20220427200341_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("AnimaPlayBack.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Advisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CustomIdentityUserId")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CustomIdentityUserId")
                        .IsUnique();

                    b.HasIndex("InstitutionId");

                    b.ToTable("Advisors");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.CourseInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("CourseInstitution");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.CustomIdentityUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a0e0cb88-67e0-4ca5-8214-b6be52e659d1",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEPL4iQX+/I8wKIclje+wUt1LCMIXUEdK1bU+MO9LlEOQOn+BAI926NQXdfVb/pFoxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "485b0d3c-cef2-48ce-b314-d8689707a649",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.LabLider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CustomIdentityUserId")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CustomIdentityUserId")
                        .IsUnique();

                    b.HasIndex("InstitutionId");

                    b.ToTable("LabLiders");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomIdentityUserId")
                        .HasColumnType("int");

                    b.Property<string>("JobRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomIdentityUserId")
                        .IsUnique();

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int?>("LabLiderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("LabLiderId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.ProjectAdvisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdvisorId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectAdvisor");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.ProjectLabLider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LabLiderId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LabLiderId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectLabLider");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("CustomIdentityUserId")
                        .HasColumnType("int");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("int");

                    b.Property<int>("Ra")
                        .HasColumnType("int");

                    b.Property<string>("StudentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CustomIdentityUserId")
                        .IsUnique();

                    b.HasIndex("InstitutionId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "4a8d6de9-fc3a-438c-81c4-34630539d2bf",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "d37a27f0-f90d-42f0-8706-a11d26362dde",
                            Name = "lablider",
                            NormalizedName = "LABLIDER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "211636ab-7035-47d9-a0ee-0b6e64f460f4",
                            Name = "advisor",
                            NormalizedName = "ADVISOR"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "62f29dd4-69ec-42bb-9525-fa7052e4980d",
                            Name = "student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "b948424c-53cd-4950-ae2d-1ffaca77c217",
                            Name = "partner",
                            NormalizedName = "PARTNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Address", b =>
                {
                    b.HasOne("AnimaPlayBack.Entities.Partner", "Partner")
                        .WithOne("Address")
                        .HasForeignKey("AnimaPlayBack.Entities.Address", "PartnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Advisor", b =>
                {
                    b.HasOne("AnimaPlayBack.Entities.Course", "Course")
                        .WithMany("Advisors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AnimaPlayBack.Entities.CustomIdentityUser", "CustomIdentityUser")
                        .WithOne("Advisor")
                        .HasForeignKey("AnimaPlayBack.Entities.Advisor", "CustomIdentityUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimaPlayBack.Entities.Institution", "Institution")
                        .WithMany("Advisors")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");

                    b.Navigation("CustomIdentityUser");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.CourseInstitution", b =>
                {
                    b.HasOne("AnimaPlayBack.Entities.Course", "Course")
                        .WithMany("CourseInstitution")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimaPlayBack.Entities.Institution", "Institution")
                        .WithMany("CourseInstitution")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.LabLider", b =>
                {
                    b.HasOne("AnimaPlayBack.Entities.Course", "Course")
                        .WithMany("LabLiders")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AnimaPlayBack.Entities.CustomIdentityUser", "CustomIdentityUser")
                        .WithOne("LabLider")
                        .HasForeignKey("AnimaPlayBack.Entities.LabLider", "CustomIdentityUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimaPlayBack.Entities.Institution", "Institution")
                        .WithMany("LabLiders")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");

                    b.Navigation("CustomIdentityUser");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Partner", b =>
                {
                    b.HasOne("AnimaPlayBack.Entities.CustomIdentityUser", "CustomIdentityUser")
                        .WithOne("Partner")
                        .HasForeignKey("AnimaPlayBack.Entities.Partner", "CustomIdentityUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomIdentityUser");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Project", b =>
                {
                    b.HasOne("AnimaPlayBack.Entities.Advisor", null)
                        .WithMany("Projects")
                        .HasForeignKey("AdvisorId");

                    b.HasOne("AnimaPlayBack.Entities.LabLider", null)
                        .WithMany("Projects")
                        .HasForeignKey("LabLiderId");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.ProjectAdvisor", b =>
                {
                    b.HasOne("AnimaPlayBack.Entities.Advisor", "Advisor")
                        .WithMany("ProjectsAdvisors")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimaPlayBack.Entities.Project", "Project")
                        .WithMany("ProjectsAdvisors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.ProjectLabLider", b =>
                {
                    b.HasOne("AnimaPlayBack.Entities.LabLider", "LabLider")
                        .WithMany("ProjectsLabLiders")
                        .HasForeignKey("LabLiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimaPlayBack.Entities.Project", "Project")
                        .WithMany("ProjectsLabLiders")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabLider");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Student", b =>
                {
                    b.HasOne("AnimaPlayBack.Entities.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AnimaPlayBack.Entities.CustomIdentityUser", "CustomIdentityUser")
                        .WithOne("Student")
                        .HasForeignKey("AnimaPlayBack.Entities.Student", "CustomIdentityUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AnimaPlayBack.Entities.Institution", "Institution")
                        .WithMany("Students")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");

                    b.Navigation("CustomIdentityUser");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AnimaPlayBack.Entities.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AnimaPlayBack.Entities.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimaPlayBack.Entities.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AnimaPlayBack.Entities.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Advisor", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("ProjectsAdvisors");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Course", b =>
                {
                    b.Navigation("Advisors");

                    b.Navigation("CourseInstitution");

                    b.Navigation("LabLiders");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.CustomIdentityUser", b =>
                {
                    b.Navigation("Advisor");

                    b.Navigation("LabLider");

                    b.Navigation("Partner");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Institution", b =>
                {
                    b.Navigation("Advisors");

                    b.Navigation("CourseInstitution");

                    b.Navigation("LabLiders");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.LabLider", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("ProjectsLabLiders");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Partner", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("AnimaPlayBack.Entities.Project", b =>
                {
                    b.Navigation("ProjectsAdvisors");

                    b.Navigation("ProjectsLabLiders");
                });
#pragma warning restore 612, 618
        }
    }
}
